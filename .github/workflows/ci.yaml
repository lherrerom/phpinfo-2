name: CI
on: 
  push:
    branches:
    - docker
jobs:
  docker:
    runs-on: ubuntu-18.04
    steps:
    - name: checkout
      uses: actions/checkout@v2
    - name: test
      run: |
        set -x
        docker build -t test .
        docker run -d --name testcontainer test
        while true
          do \
            sleep 10
            docker exec testcontainer ps | grep 'php -f index.php' && break
          done
        while true
          do \
            sleep 10
            docker logs testcontainer 2>& 1 | grep 'PHP .* Development Server .* started' && break
          done
  swarm:
    runs-on: ubuntu-18.04
    steps:
    - name: checkout
      uses: actions/checkout@v2
    - name: test
      run: |
        set -x
        docker build -t lherrerom/phpinfo-2:testing .
        docker swarm init
        #Creamos una variable
        project=phpinfo-2        
        compose=etc/swarm/manifests/${project}.yaml
        #Va al archivo yaml y cambia el tag latest por testing para probar la imagen que acabamos de crear 
        sed -i /image:/s/latest/testing/ ${compose}
        sed -i /node.role/s/worker/manager/ ${compose}
        #desplegar en Openshift
        #oc apply -f ${compose}
        #Despliegue en Kubernetes
        #kubectl apply -f ${compose}
        #Despliegue en Swarm en el namespace phpinfo-2
        docker stack deploy -c ${compose} ${project}
        while true
          do \
            sleep 10
            # Los paréntesis han de llevar contrabara delante porque sino no funcionan con greep
            #\1 es o que hay dentro de los paréntesis, como en dockerhub
            docker service ls | grep "${project}.*\([0-9]\)/\1" && break
          done
        while true
          do \
            sleep 10
            # El nombre del servicio es NombreProyecto_nombreAplicacion
            docker service logs ${project}_${project} 2>& 1 | grep 'PHP .* Development Server .* started' && break
          done
  kubernetes:
    runs-on: ubuntu-18.04
    steps:
    - name: checkout
      uses: actions/checkout@v2
    - name: test
      run: |
        set -x
        #creo imagen image
        docker build -t terferre/phpinfo-2:testing .
        #instalo Kubernetes en una máquina Ubuntu
        sudo apt-get update -y
        #sudo apt-get install -y docker.io
        sudo systemctl enable --now docker
        curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -
        echo deb http://apt.kubernetes.io/ kubernetes-xenial main | sudo tee -a /etc/apt/sources.list.d/kubernetes.list
        sudo apt-get update
        apt-get install -y --allow-downgrades kubelet=1.18.14-00 kubeadm=1.18.14-00 kubectl=1.18.14-00
        sudo systemctl enable --now kubelet
        #inicializar Kubernetes
        #capturamos la IP de la máquina virtual
        ip_leader=$( ip r | grep default | awk '{ print $9 }' )
        echo ${ip_leader} kube-apiserver | sudo tee -a /etc/hosts
        sudo swapoff --all
        ###########
        sudo kubeadm init --upload-certs --control-plane-endpoint kube-apiserver --pod-network-cidr 192.168.0.0/16  --ignore-preflight-errors all
        #copiamos las credenciales a nuestro directorio
        #Cuando se crea un cluster por defecto las credenciales están en la ruta indicada
        mkdir -p ${HOME}/.kube
        sudo cp /etc/kubernetes/admin.conf ${HOME}/.kube/config
        sudo chown -R $( id -u ):$( id -g ) ${HOME}/.kube
        # Una vez iniializado Kubernetes creamos la red y usamos el provider de calico
        kubectl apply -f https://docs.projectcalico.org/v3.17/manifests/calico.yaml
        #Comprobar que el cluster está listo
        while true
          do \
            kubectl get node | grep Ready | gre -v NorReady && break
          done
        #Limpiar la configuración
        sudo sed -i /kube-apiserver/d /etc/hosts
        #Añade una palabra nueva en esta línea
        sudo sed -i /127.0.0.1.*localhost/s/$/' 'kube-apiserver/ /etc/hosts
        #Habilitar el master, primero guardamos el master en una variable
        master=$( kubectl get node | grep master | awk '{ print $1 }' )
        #Tintamos con una marca el nodo para que sea ejecutable y añadimos efecto de la marca
        #Con el menos destinta (esto nos sirve para poder nosotros desplegar aquí, en el master)
        # POR DEFECTO a las máquinas con etiqueta node-role.kubernetes.io/master, por defecto los masters le 
        # indicamos noSchedule para que nos deplieguen
        kubectl taint node ${master} node-role.kubernetes.io/master:noSchedule-
        
        project=phpinfo-2
        compose=etc/kubernetes/manifests/${project}.yaml
        #sustituyo latest x testing y despliego con compose
        sed -i /image:/s/latest/testing/ ${compose}
        sed -i /imagePullPolicy/s/Always/Never  ${compose}
        #Despliegue en Openshift
        #oc apply -f ${compose}
        #despliegue en Kubernetes
        kubectl apply -f ${compose}
        #desplioegue en swarm
        #docker stack deploy -c ${compose} ${project}
        while true 
          do \
            sleep 10
            kubectl get deploy | grep "${project}.*\([0-9]\)/\1" && break
          done
        while true
          do \
            sleep 10
            kubectl logs  deploy/${project} 2>& 1 | grep 'PHP .* Development Server .* started' && break 
          done      
            
